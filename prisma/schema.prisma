generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? // Used by NextAuth for email verification
  image         String?
  createdAt     DateTime  @default(now()) // Added for tracking user join date
  accounts      Account[]
  sessions      Session[]
  polls         Poll[]    @relation("PollCreatedBy")
  votes         Vote[]    @relation("UserVotes")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Poll {
  id          String   @id @default(uuid())
  title       String
  isAnonymous Boolean  @default(false)
  totalVotes  Int      @default(0)
  createdById String
  createdBy   User     @relation("PollCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now()) // Added for tracking poll creation time
  options     Option[]
  votes       Vote[]
}

model Option {
  id        String @id @default(uuid())
  text      String
  voteCount Int    @default(0)
  pollId    String
  poll      Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  pollId    String
  optionId  String
  user      User     @relation("UserVotes", fields: [userId], references: [id], onDelete: Cascade)
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) // Added for tracking vote time

  @@unique([userId, pollId]) // Ensures a user can only vote once per poll
}